"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[744],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},699:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return k}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={sidebar_position:2},l="Crosschain Txs",c={unversionedId:"Integration/QuickStart/transfer",id:"Integration/QuickStart/transfer",isDocsHomePage:!1,title:"Crosschain Txs",description:"The core flow for sending a transaction through Connext consists of:",source:"@site/docs/Integration/QuickStart/transfer.mdx",sourceDirName:"Integration/QuickStart",slug:"/Integration/QuickStart/transfer",permalink:"/documentation/Integration/QuickStart/transfer",editUrl:"https://github.com/integer-underflow/documentation/docs/Integration/QuickStart/transfer.mdx",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"integration",previous:{title:"Installation & Setup",permalink:"/documentation/Integration/QuickStart/setup"},next:{title:"Events",permalink:"/documentation/Integration/QuickStart/events"}},p=[{value:"GetTransferQuote",id:"gettransferquote",children:[]},{value:"Executing the Transaction",id:"executing-the-transaction",children:[]},{value:"Next Steps",id:"next-steps",children:[]},{value:"Full Example",id:"full-example",children:[]}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",t)}},d=u("Tabs"),m=u("TabItem"),f={toc:p};function k(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"crosschain-txs"},"Crosschain Txs"),(0,i.kt)("p",null,"The core flow for sending a transaction through Connext consists of:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Getting a transfer quote: returns an estimated price and commitment for the transfer."),(0,i.kt)("li",{parentName:"ol"},"Starting the transfer: sends the user's transaction on chain A and waits for the network to provide liquidity."),(0,i.kt)("li",{parentName:"ol"},"Finishing the transfer: completes the user's transaction on chain B.")),(0,i.kt)("h2",{id:"gettransferquote"},"GetTransferQuote"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"getTransferQuote")," function accepts the following arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sendingAssetId"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". Address of token on the initiating chain. Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Address(0)")," for native assets like $ETH."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sendingChainId"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". ",(0,i.kt)("a",{parentName:"li",href:"https://chainid.network/"},"ChainId")," of the initiating chain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receivingAssetId"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". Address of token on the receiving chain. Use ",(0,i.kt)("inlineCode",{parentName:"li"},"Address(0)")," for native assets like $ETH."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receivingChainId"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". ",(0,i.kt)("a",{parentName:"li",href:"https://chainid.network/"},"ChainId")," of the receiving chain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"receivingAddress"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". Address that the token will be sent to on receiving chain. If ",(0,i.kt)("inlineCode",{parentName:"li"},"callData")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"callTo")," is provided, then ",(0,i.kt)("inlineCode",{parentName:"li"},"receivingAddress")," acts as a fallback in case of a contract revert on the receiving chain."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amount"),": ",(0,i.kt)("em",{parentName:"li"},"Required"),". Amount of funds (as BigNumber) to be sent either as a transaction or along with a calldata payload."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"expiry"),": ",(0,i.kt)("em",{parentName:"li"},"Optional"),". Fallback duration after which a tx is forcibly reverted if there is no response from the network. Recommended: 72 hours."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"callTo"),": ",(0,i.kt)("em",{parentName:"li"},"Optional"),". Destination contract address if doing a crosschain contract call."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"callData"),": ",(0,i.kt)("em",{parentName:"li"},"Optional"),". Calldata for crosschain contract call.")),(0,i.kt)("p",null,"It returns an ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/connext/nxtp/blob/c4-68/packages/utils/src/messaging.ts#L259"},"AuctionResponse")," object."),(0,i.kt)("p",null,"Example:"),(0,i.kt)(d,{defaultValue:"ts",values:[{label:"Typescript",value:"ts"}],mdxType:"Tabs"},(0,i.kt)(m,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const quote = await sdk.getTransferQuote({\n  sendingAssetId: "0x9aC2c46d7AcC21c881154D57c0Dc1c55a3139198",\n  sendingChainId: 4,\n  receivingAssetId: "0x8a1Cad3703E0beAe0e0237369B4fcD04228d1682",\n  receivingChainId: 5,\n  receivingAddress: "0x5A9e792143bf2708b4765C144451dCa54f559a11",\n  amount: utils.parseEther("1"),\n});\n\n// You can validate price paid by user with data from quote\nconst feeEstimate = amount.sub(quote.bid.amountReceived);\n')))),(0,i.kt)("h2",{id:"executing-the-transaction"},"Executing the Transaction"),(0,i.kt)("p",null,"First, ",(0,i.kt)("inlineCode",{parentName:"p"},"prepareTransfer")," to initiate the transaction to our contracts. Then, wait for the transaction to be prepared on the receiving chain and call ",(0,i.kt)("inlineCode",{parentName:"p"},"fulfillTransfer"),"."),(0,i.kt)(d,{defaultValue:"ts",values:[{label:"Typescript",value:"ts"}],mdxType:"Tabs"},(0,i.kt)(m,{value:"ts",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// start transfer, will either prompt user for sigs/transactions or sign with unlocked account\nconst transfer = await sdk.prepareTransfer(quote);\n\n// wait for receiver prepared event\nconst prepared = await sdk.waitFor(\n  NxtpSdkEvents.ReceiverTransactionPrepared,\n  100_000,\n  (data) => data.txData.transactionId === transfer.transactionId // filter function\n);\n\nawait sdk.fulfillTransfer(prepared);\n// done!\n")))),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"See the other sections in this folder for information on ",(0,i.kt)("a",{parentName:"p",href:"./events"},"events"),", ",(0,i.kt)("a",{parentName:"p",href:"./api-reference"},"API"),", etc."),(0,i.kt)("h2",{id:"full-example"},"Full Example"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/connext/nxtp/tree/main/packages/test-ui"},(0,i.kt)("inlineCode",{parentName:"a"},"test-ui"))," for a full working example of a React integration of the SDK."))}k.isMDXComponent=!0}}]);