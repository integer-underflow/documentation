"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[103],{3905:function(n,t,e){e.d(t,{Zo:function(){return p},kt:function(){return m}});var a=e(7294);function r(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function i(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?i(Object(e),!0).forEach((function(t){r(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):i(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function c(n,t){if(null==n)return{};var e,a,r=function(n,t){if(null==n)return{};var e,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||(r[e]=n[e]);return r}(n,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)e=i[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(r[e]=n[e])}return r}var s=a.createContext({}),l=function(n){var t=a.useContext(s),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},p=function(n){var t=l(n.components);return a.createElement(s.Provider,{value:t},n.children)},u={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(n,t){var e=n.components,r=n.mdxType,i=n.originalType,s=n.parentName,p=c(n,["components","mdxType","originalType","parentName"]),d=l(e),m=r,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return e?a.createElement(f,o(o({ref:t},p),{},{components:e})):a.createElement(f,o({ref:t},p))}));function m(n,t){var e=arguments,r=t&&t.mdxType;if("string"==typeof n||r){var i=e.length,o=new Array(i);o[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=n,c.mdxType="string"==typeof n?n:r,o[1]=c;for(var l=2;l<i;l++)o[l]=e[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,e)}d.displayName="MDXCreateElement"},6144:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var a=e(7462),r=e(3366),i=(e(7294),e(3905)),o=["components"],c={sidebar_position:3},s="Initiating a Crosschain Transaction from a Smart Contract",l={unversionedId:"Integration/Guides/initiating-from-contract",id:"Integration/Guides/initiating-from-contract",isDocsHomePage:!1,title:"Initiating a Crosschain Transaction from a Smart Contract",description:'It is possible to initiate an NXTP crosschain transaction from a smart contract. This allows NXTP to be used as a "money lego" and integrated into DeFi applications. For example, one can write a contract to swap on Uniswap or SushiSwap and directly transfer the received tokens across chains.',source:"@site/docs/Integration/Guides/initiating-from-contract.md",sourceDirName:"Integration/Guides",slug:"/Integration/Guides/initiating-from-contract",permalink:"/Integration/Guides/initiating-from-contract",editUrl:"https://github.com/integer-underflow/documentation/docs/Integration/Guides/initiating-from-contract.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"integration",previous:{title:"Calling a Contract on the Receiving Chain",permalink:"/Integration/Guides/calling-a-contract"},next:{title:"Active Transaction Status & Historical Transaction Status",permalink:"/Integration/Guides/tx-history-status"}},p=[{value:"Process",id:"process",children:[]},{value:"Example",id:"example",children:[]}],u={toc:p};function d(n){var t=n.components,e=(0,r.Z)(n,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initiating-a-crosschain-transaction-from-a-smart-contract"},"Initiating a Crosschain Transaction from a Smart Contract"),(0,i.kt)("p",null,'It is possible to initiate an NXTP crosschain transaction from a smart contract. This allows NXTP to be used as a "money lego" and integrated into DeFi applications. For example, one can write a contract to swap on Uniswap or SushiSwap and directly transfer the received tokens across chains.'),(0,i.kt)("h2",{id:"process"},"Process"),(0,i.kt)("p",null,"In order to initiate a crosschain transaction, you will need to retrieve a signed bid from a router. This can be done by using the ",(0,i.kt)("inlineCode",{parentName:"p"},"getTransferQuote")," method in the SDK. This quote can then be put on chain using the ",(0,i.kt)("inlineCode",{parentName:"p"},"prepare")," method."),(0,i.kt)("p",null,"Th smart contract can then use the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/connext/nxtp/blob/main/packages/contracts/contracts/TransactionManager.sol#L287"},(0,i.kt)("inlineCode",{parentName:"a"},"prepare"))," function on the ",(0,i.kt)("inlineCode",{parentName:"p"},"TransactionManager")," contract using its ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/connext/nxtp/blob/main/packages/contracts/contracts/interfaces/ITransactionManager.sol"},"interface"),"."),(0,i.kt)("p",null,"The deployed contract addresses can be found in the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/connext/nxtp/blob/main/packages/contracts/deployments.json"},"deployments.json"),"."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport "./interfaces/ITransactionManager.sol";\n\ncontract CrossChain {\n  private immutable ITransactionManager transactionManager;\n\n  constructor() public {\n    transactionManager = ITransactionManager(0x80623b8534d855479Ff4621caBE65d451A81BDFe); // from deployments.json\n  }\n\n  function transfer(\n    address user,\n    InvariantTransactionData calldata invariantData, // contains swap info such as assets, router, chains\n    uint256 expiry,\n    bytes calldata encryptedCallData, // optional calldata\n    bytes calldata encodedBid, // bid from router\n    bytes calldata bidSignature // router\'s sig on bid\n  ) public returns (TransactionData memory) {\n\n    // ...\n    // do some stuff\n    // ...\n\n    return transactionManager.prepare(\n      invariantData,\n      amount,\n      expiry,\n      encryptedCallData,\n      encodedBid,\n      bidSignature\n    )\n  }\n}\n')))}d.isMDXComponent=!0}}]);