"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[75],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(n),f=r,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||i;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8193:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={sidebar_position:3},c="Events",s={unversionedId:"Integration/QuickStart/events",id:"Integration/QuickStart/events",isDocsHomePage:!1,title:"Events",description:"The NxtpSdk emits events that can offer builders a better experience for their users by notifying them of things going on in the transfer flow.",source:"@site/docs/Integration/QuickStart/events.md",sourceDirName:"Integration/QuickStart",slug:"/Integration/QuickStart/events",permalink:"/Integration/QuickStart/events",editUrl:"https://github.com/integer-underflow/documentation/docs/Integration/QuickStart/events.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"integration",previous:{title:"Crosschain Txs",permalink:"/Integration/QuickStart/transfer"},next:{title:"Testing NXTP Against Testnets",permalink:"/Integration/Guides/testnet"}},p=[{value:"Listening to Events",id:"listening-to-events",children:[]},{value:"Events",id:"events-1",children:[]},{value:"Example",id:"example",children:[]}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"events"},"Events"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"NxtpSdk")," emits events that can offer builders a better experience for their users by notifying them of things going on in the transfer flow."),(0,i.kt)("h2",{id:"listening-to-events"},"Listening to Events"),(0,i.kt)("p",null,"The SDK supports the following methods to listen for events, heavily inspired by the ",(0,i.kt)("a",{parentName:"p",href:"https://www.evt.land"},"Evt")," library's interface. The methods can be called directly on the SDK instance:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".attach(eventName, callbackFn, filterFn)")," - Listen for an event and run a handler on every instance of that event, with an optional filter function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".attachOnce(eventName, callbackFn, filterFn)")," - Listen for an event and run a handler on the first instance, with an optional filter function. Detaches the listener after."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".waitFor(eventName, timeoutMs, filterFn)")," - Listen for an event and resolve a promise with the event payload on the first instance, with an optional filter function."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},".detach(eventName)")," - Detach listeners by event name or all events (if name isn't provided).")),(0,i.kt)("h2",{id:"events-1"},"Events"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTransactionPrepareTokenApproval")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTokenApprovalMined")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTransactionPrepareSubmitted")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTransactionPrepared")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTransactionFulfilled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SenderTransactionCancelled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReceiverPrepareSigned")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReceiverTransactionPrepared")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReceiverTransactionFulfilled")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ReceiverTransactionCancelled"))),(0,i.kt)("p",null,"The event payloads are fully typed, the callbacks will automatically be typed with the event that is listened for."),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Run callback on every request for specific transactionId"',title:'"Run',callback:!0,on:!0,every:!0,request:!0,for:!0,specific:!0,'transactionId"':!0},'sdk.attach(\n  NxtpSdkEvents.SenderTransactionPrepared,\n  (data) => {\n    console.log("SenderTransactionPrepared:", data); // data is fully typed\n  },\n  (data) => data.txData.transactionId === transactionId\n);\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Run callback on a single request for specific transactionId"',title:'"Run',callback:!0,on:!0,a:!0,single:!0,request:!0,for:!0,specific:!0,'transactionId"':!0},'sdk.attachOnce(NxtpSdkEvents.SenderTransactionPrepared, (data) => {\n  console.log("SenderTransactionPrepared:", data); // data is fully typed\n});\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Wait for a specific event"',title:'"Wait',for:!0,a:!0,specific:!0,'event"':!0},'try {\n  const data = await sdk.waitFor(\n    NxtpSdkEvents.ReceiverTransactionPrepared,\n    100_000,\n    (data) => data.txData.transactionId === transactionId\n  );\n  console.log("ReceiverTransactionPrepared:", data); // data is fully typed\n} catch (e) {\n  // did not get event in time\n}\n')))}u.isMDXComponent=!0}}]);